@page "/founder"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Nostr.Client.Messages
@using Angor.Client.Shared
@using System.Threading
@using System.Threading.Tasks

@inject NavigationManager NavigationManager
@inject NavMenuState NavMenuState
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService RelayService;
@inject IIndexerService _IndexerService
@inject ISerializer serializer

<NotificationComponent @ref="notificationComponent" />

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

<div class="header-container slide-in">
    <div class="card card-body">
        <div class="header-content">
            <div class="header-title animate-fade-in">
                <span class="header-icon-wrapper">
                    <Icon IconName="founder" Width="32" Height="32" />
                </span>
                <h5 class="header-text">Founder</h5>
            </div>
            <div class="header-actions">
                <div class="tooltip-container" data-bs-toggle="tooltip" title="@GetCreateButtonTooltip()">
                    <button class="btn btn-border-success"
                            @onclick="NavigateToCreateProject"
                            disabled="@(scanningForProjects || (founderProjects.Count >= 14) ? true : null)">
                        @if (scanningForProjects)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="button-text ms-2">Scanning...</span>
                        }
                        else
                        {
                            <Icon IconName="add" Width="24" Height="24" />
                            <span class="button-text ms-2">Create Project</span>
                        }
                    </button>
                </div>

            </div>
        </div>
    </div>
</div>


<div class="row slide-in mt-4">
    <div class="card card-body">
        <p class="mb-0 font-weight-normal text-sm animate-fade-in-delayed">
            To create a new project, an on-chain transaction and a Nostr DID are created.
        </p>
    </div>
</div>

@if (founderProjects.Count == 0)
{
    <div class="row">
        <div class="info-alert my-4 ">
            <Icon IconName="info" Class="alert-icon" Width="24" Height="24" />
            <p class="text-warning">
                No projects found.
            </p>
        </div>
    </div>
}

@if (founderProjects.Count > 0)
{
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3 project-wrapper g-4" data-cy="project-grid">
        @foreach (var project in founderProjects)
        {
            <FounderProjectItem FounderProject="@project"></FounderProjectItem>
        }
    </div>
}

<div class="row">
    <div class="col">
        <div class="d-flex justify-content-center mt-4">
            <button class="btn btn-border my-3 w-100-m" @onclick="LookupProjectKeysOnIndexerAsync">
                <i class="@(scanningForProjects ? "rotate-icon" : "")">
                    <Icon IconName="refresh"></Icon>
                </i>
                <span class="nav-link-text ms-1">@(founderProjects.Count == 0 ? "Scan for founder projects" : "Rescan founder projects")</span>
            </button>
        </div>
    </div>
</div>

@code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;
    private CancellationTokenSource _scanCts;

    protected override async Task OnInitializedAsync()
    {
        // Set active menu
        NavMenuState.SetActivePage("founder");
        
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            founderProjects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();
            
            // Check if we need to perform an automatic rescan
            if (_walletStorage.NeedsRescan())
            {
                notificationComponent?.ShowInfo("Performing automatic rescan after wallet restore...");
                await LookupProjectKeysOnIndexerAsync(isAutoRescan: true);
                _walletStorage.SetNeedsRescan(false);
            }
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync(bool isAutoRescan = false)
    {
        if (scanningForProjects)
        {
            notificationComponent?.ShowWarning("A scan is already in progress");
            return;
        }

        scanningForProjects = true;
        StateHasChanged();

        try 
        {
            // Create new CancellationTokenSource with 5-minute timeout
            _scanCts?.Dispose();
            _scanCts = new CancellationTokenSource(TimeSpan.FromMinutes(5));

            var keys = _walletStorage.GetFounderKeys();
            var founderProjectsToLookup = new Dictionary<string, ProjectIndexerData>();

            foreach (var key in keys.Keys)
            {
                // Check for cancellation
                _scanCts.Token.ThrowIfCancellationRequested();
                
                if (founderProjects.Any(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                    continue;

                var indexerProject = await _IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

                if (indexerProject != null)
                    founderProjectsToLookup.Add(key.NostrPubKey, indexerProject);
            }

            if (!founderProjectsToLookup.Any())
            {
                scanningForProjects = false;
                if (isAutoRescan)
                {
                    notificationComponent?.ShowSuccess("Automatic rescan complete - No new projects found");
                }
                return;
            }

            RelayService.RequestProjectCreateEventsByPubKey(
                e =>
                {
                    // Check for cancellation in the event handler
                    if (_scanCts.Token.IsCancellationRequested) return;
                    
                    switch (e)
                    {
                        case { Kind: NostrKind.Metadata }:
                            var nostrMetadata = serializer.Deserialize<ProjectMetadata>(e.Content);
                            var existingProject = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);

                            if (existingProject != null)
                            {
                                existingProject.Metadata ??= nostrMetadata;
                            }
                            else
                            {
                                var founderProject = CreateFounderProject(founderProjectsToLookup, e);
                                founderProject.Metadata = nostrMetadata;
                                founderProjects.Add(founderProject);
                            }

                            break;

                        case { Kind: NostrKind.ApplicationSpecificData }:
                            if (e.Id != founderProjectsToLookup[e.Pubkey].NostrEventId)
                                return;

                            var projectInfo = serializer.Deserialize<ProjectInfo>(e.Content);
                            var project = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);

                            if (project != null)
                            {
                                if (!string.IsNullOrEmpty(project.ProjectInfo.ProjectIdentifier))
                                    return;

                                project.ProjectInfo = projectInfo;
                            }
                            else
                            {
                                project ??= CreateFounderProject(founderProjectsToLookup, e, projectInfo);
                                founderProjects.Add(project);
                            }

                            break;
                    }
                },
                () =>
                {
                    scanningForProjects = false;

                    // Merge or update projects in storage
                    foreach (var project in founderProjects)
                    {
                        var existing = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == project.ProjectInfo.ProjectIdentifier);
                        if (existing == null)
                        {
                            storage.AddFounderProject(new[] { project });
                        }
                        else
                        {
                            storage.UpdateFounderProject(project);
                        }
                    }

                    if (isAutoRescan)
                    {
                        notificationComponent?.ShowSuccess($"Automatic rescan complete - Found {founderProjectsToLookup.Count} project(s)");
                    }

                    StateHasChanged();
                },
                founderProjectsToLookup.Keys.ToArray());
        }
        catch (OperationCanceledException)
        {
            scanningForProjects = false;
            notificationComponent?.ShowWarning("Scan operation timed out. Please try again.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            scanningForProjects = false;
            notificationComponent?.ShowError($"Error during {(isAutoRescan ? "automatic " : "")}rescan: {ex.Message}");
            StateHasChanged();
        }
    }

    private FounderProject CreateFounderProject(Dictionary<string, ProjectIndexerData> founderProjectsToLookup,
        NostrEvent e, ProjectInfo? projectInfo = null)
    {
        var keys = _walletStorage.GetFounderKeys();
        var projectIndex = keys.Keys.First(x => x.NostrPubKey == e.Pubkey).Index; //we throw if not found
        var trxId = founderProjectsToLookup[e.Pubkey].TrxId;

        return new FounderProject
            {
                ProjectInfo = projectInfo ?? new ProjectInfo { NostrPubKey = e.Pubkey },
                ProjectIndex = projectIndex,
                CreationTransactionId = trxId,
                NostrProfileCreated = true,
                ProjectInfoEventId = founderProjectsToLookup[e.Pubkey].NostrEventId
            };
    }

    private async Task NavigateToCreateProject()
    {
        // perform a rescan before creating a project (to update the keys)
        await LookupProjectKeysOnIndexerAsync();

        NavigationManager.NavigateTo("/create");
    }
    private string GetCreateButtonTooltip()
    {
        if (founderProjects.Count >= 15)
            return "You have reached the maximum number of projects. Please manage your existing projects.";
        if (scanningForProjects)
            return "Scanning in progress...";
        return "Create a new project.";
    }

    public void Dispose()
    {
        _scanCts?.Dispose();
    }
}